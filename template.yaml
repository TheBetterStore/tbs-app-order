AWSTemplateFormatVersion: 2010-09-09
Description: >-
  The Better Store Order API

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod

  InfraBaseCFName:
    Type: String

  AppAdminCFName:
    Type: String

  AppLoginCFName:
    Type: String

  ConfirmOrderReservedConcurrency:
    Type: String
    Default: 10

  PaymentApiUrl:
    Type: String
    Default: https://api.thebetterstore.net

Resources:

  OrderTable:
    Type: AWS::DynamoDB::Table
#    DeletionPolicy: Retain
#    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "customerId"
          AttributeType: "S"
        - AttributeName: "orderId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "customerId"
          KeyType: "HASH"
        - AttributeName: "orderId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
#      ProvisionedThroughput:
#        ReadCapacityUnits: 1
#        WriteCapacityUnits: 1
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false

  GetOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/tbs-app-order.zip
      Handler: application/lambdas/get-orders/index.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      AutoPublishAlias: prod
      Description: Get order functions
      Tracing: Active
      # Role: !GetAtt LambdaExcecutionRole.Arn
      Environment:
        Variables:
          ORDER_TABLE_NAME: !Ref OrderTable
      Policies:
        - Statement:
            - Sid: DynamoDbPolicy
              Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:Get*
              Resource: !GetAtt OrderTable.Arn

  GetOrdersFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "", [ "/aws/lambda/", !Ref GetOrdersFunction ] ]
      RetentionInDays: 365

  ConfirmOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/tbs-app-order.zip
      Handler: application/lambdas/confirm-order/index.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      AutoPublishAlias: prod
      Description: Upsert order function
      Tracing: Active
      ReservedConcurrentExecutions: !Sub ${ConfirmOrderReservedConcurrency}
      Environment:
        Variables:
          ORDER_TABLE_NAME: !Ref OrderTable
          PAYMENT_API_URL: !Ref PaymentApiUrl
          TBS_EVENTBUS_ARN:
            Fn::ImportValue: !Sub ${InfraBaseCFName}:TbsEventBusArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable
        - Statement:
            - Effect: Allow
              Action: events:PutEvents
              Resource:
                Fn::ImportValue: !Sub ${InfraBaseCFName}:TbsEventBusArn

  ConfirmOrderFunctionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "", [ "/aws/lambda/", !Ref ConfirmOrderFunction ] ]
      RetentionInDays: 365

  ApiGwExecutionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", ["API-Gateway-Execution-Logs_", !Ref OrderApi, '/Prod']]
      RetentionInDays: 365

  ApiGwAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", ["API-Gateway-Access-Logs_", !Sub "${AWS::StackName}"]]
      RetentionInDays: 365

  GetOrdersFunctionApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref "GetOrdersFunction.Alias"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OrderApi}/*"

  ConfirmOrderFunctionApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref "ConfirmOrderFunction.Alias"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OrderApi}/*"

  OrderApi:
    Type: AWS::Serverless::Api
    DependsOn:
      - ConfirmOrderFunction
      - GetOrdersFunction
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      MinimumCompressionSize: 0
      TracingEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGwAccessLogs.Arn
        Format: >
          {"requestTimeEpoch": $context.requestTimeEpoch, "requestId":"$context.requestId",
          "httpMethod": "$context.httpMethod", "path":"$context.path", "resourcePath": "$context.resourcePath",
          "status": "$context.status",
          "lambdaRequestId": "$context.integration.requestId", "integrationStatus": "$context.integration.status",
          "xrayTraceId": "$context.xrayTraceId", "responseLatency": $context.responseLatency,
          "integrationLatency": "$context.integrationLatency", "error": "$context.error.message",
          "userAgent": "$context.identity.userAgent", "sourceIp": "$context.identity.sourceIp"}
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          DataTraceEnabled: false
          MetricsEnabled: true # Enable detailed metrics (error 404, latence, ...)
          ThrottlingRateLimit: 10
          ThrottlingBurstLimit: 10
          LoggingLevel: ERROR
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: !Sub "${AWS::StackName}-api"
          version: "2021-06-10T02:04:23Z"
        paths:
          /orders:
            post:
              responses:
                "201":
                  description: "201 response"
                  headers:
                    Strict-Transport-Security:
                      schema:
                        type: "string"
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
              security:
                - TbsUser: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConfirmOrderFunction.Arn}:prod/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Strict-Transport-Security: "'max-age=31536000; includeSubdomains; preload'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                type: "aws_proxy"
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Strict-Transport-Security:
                      schema:
                        type: "string"
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
              security:
                - TbsUser: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrdersFunction.Arn}:prod/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Strict-Transport-Security: "'max-age=31536000; includeSubdomains; preload'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                    Strict-Transport-Security:
                      type: "string"
                    X-Frame-Options:
                      type: "string"
                    Content-Security-Policy:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,PATCH,PUT,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Strict-Transport-Security: "'max-age=31536000; includeSubdomains; preload'"
                      method.response.header.X-Frame-Options: "'DENY'"
                      method.response.header.Content-Security-Policy: "'default-src \"none\"; frame-ancestors \"none\"'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

          /orders/{id}:
            get:
              parameters:
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Strict-Transport-Security:
                      schema:
                        type: "string"
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
              security:
                - TbsUser: [ ]
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrdersFunction.Arn}:prod/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Strict-Transport-Security: "'max-age=31536000; includeSubdomains; preload'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

            options:
              consumes:
                - "application/json"
              parameters:
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    X-Frame-Options:
                      type: "string"
                    Strict-Transport-Security:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Content-Security-Policy:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,POST,PATCH,PUT,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Strict-Transport-Security: "'max-age=31536000; includeSubdomains; preload'"
                      method.response.header.X-Frame-Options: "'DENY'"
                      method.response.header.Content-Security-Policy: "'default-src \"none\"; frame-ancestors \"none\"'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          TbsUser:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              providerARNs:
                - Fn::ImportValue: !Sub ${AppLoginCFName}:UserPoolArn
              type: "cognito_user_pools"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        x-amazon-apigateway-minimum-compression-size: 0

  ApiBasePathMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - OrderApi
    Properties:
      DomainName:
        Fn::ImportValue: !Sub ${InfraBaseCFName}:ApiGwCustomDomainName
      ApiId: !Ref OrderApi
      Stage: !Ref OrderApi.Stage
      ApiMappingKey: "order/v1"

Outputs:
  OrderApiId:
    Description: Id of Order api
    Value: !Ref OrderApi
    Export:
      Name: !Sub '${AWS::StackName}:OrderApiId'
